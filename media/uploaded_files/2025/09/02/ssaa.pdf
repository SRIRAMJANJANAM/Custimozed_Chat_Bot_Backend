in this delete mini map and add zoom options have and full screen and lock is there na i want that in upside import React, { useCallback, useEffect, useState } from 'react'
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  addEdge,
  useEdgesState,
  useNodesState,
} from 'reactflow'
import 'reactflow/dist/style.css'
import { API } from '../api'
import NodeSidebar from './NodeSidebar'
import { useNavigate } from 'react-router-dom'
import ReactQuill from 'react-quill'
import 'react-quill/dist/quill.snow.css'

let idCounter = 1
const genId = () => String(++idCounter)

export default function Builder({ botId }) {
  const [nodes, setNodes, onNodesChange] = useNodesState([])
  const [edges, setEdges, onEdgesChange] = useEdgesState([])
  const [selected, setSelected] = useState(null)
  const [loading, setLoading] = useState(false)
  const [inspectorChanges, setInspectorChanges] = useState({})
  const [showSaveCancel, setShowSaveCancel] = useState(false)
  const [isLeftPanelCollapsed, setIsLeftPanelCollapsed] = useState(false)
  const [isRightPanelCollapsed, setIsRightPanelCollapsed] = useState(false)
  const navigate = useNavigate()

  // Connect nodes
  const onConnect = useCallback(
    (params) =>
      setEdges((eds) =>
        addEdge(
          {
            ...params,
            label: '+',
            style: { stroke: '#333' },
            markerEnd: { type: 'arrowclosed' },
          },
          eds
        )
      ),
    []
  )

  // Add new node
  const addNode = (type) => {
    const id = genId()
    const position = {
      x: 120 + Math.random() * 320,
      y: 80 + Math.random() * 280,
    }
    const defaults = {
      greeting: 'Welcome! What topic do you need help with?',
      user_input: 'Type: order / refund',
      message: 'Here is some information…',
      branch: '',
      end: 'Goodbye!',
    }
    const data = { label: `${type} ${id}`, content: defaults[type] || '' }
    setNodes((nds) =>
      nds.concat({ id, type: 'default', position, data, _ntype: type })
    )
  }

  // Select node
  const onNodeClick = (_, node) => {
    if ((node.data.label || '').toLowerCase() === 'test') {
      navigate(`/chat/${botId}`)
    } else {
      setSelected(node)
      setInspectorChanges({})
      setShowSaveCancel(false)
    }
  }

  // Delete node on double click
  const onNodeDoubleClick = (_, node) => {
    if (window.confirm(`Delete node "${node.data.label}"?`)) {
      setNodes((nds) => nds.filter((n) => n.id !== node.id))
      setEdges((eds) =>
        eds.filter((e) => e.source !== node.id && e.target !== node.id)
      )
      if (selected?.id === node.id) {
        setSelected(null)
        setShowSaveCancel(false)
      }
    }
  }

  // Handle inspector changes
  const handleInspectorChange = (field, value) => {
    if (!selected) return
    
    setInspectorChanges(prev => ({
      ...prev,
      [field]: value
    }))
    
    // Show save/cancel buttons when changes are made
    if (!showSaveCancel) {
      setShowSaveCancel(true)
    }
  }

  // Save inspector changes
  const saveInspectorChanges = () => {
    if (!selected) return
    
    setNodes((nds) =>
      nds.map((n) =>
        n.id === selected.id
          ? { 
              ...n, 
              data: { 
                ...n.data, 
                ...inspectorChanges 
              } 
            }
          : n
      )
    )
    
    setSelected(prev => ({
      ...prev, 
      data: { 
        ...prev.data, 
        ...inspectorChanges 
      }
    }))
    
    // Reset changes and hide buttons
    setInspectorChanges({})
    setShowSaveCancel(false)
  }

  // Cancel inspector changes
  const cancelInspectorChanges = () => {
    setInspectorChanges({})
    setShowSaveCancel(false)
  }

  // Edit/remove edge
  const onEdgeDoubleClick = (evt, edge) => {
    const action = prompt(
      `Edit edge:\n\nCurrent label: ${edge.label || ''}\nType '+' to connect or '-' to remove`
    )
    if (action === '-') {
      setEdges((eds) => eds.filter((e) => e.id !== edge.id))
    } else if (action !== null) {
      setEdges((eds) =>
        eds.map((e) =>
          e.id === edge.id ? { ...e, label: action || '+' } : e
        )
      )
    }
  }

  // Save graph
  const saveGraph = async () => {
    setLoading(true)
    try {
      const payload = {
        nodes: nodes.map((n) => ({
          id: n.id,
          _ntype: n._ntype,
          position: n.position,
          data: n.data,
        })),
        edges: edges.map((e) => ({
          id: e.id,
          source: e.source,
          target: e.target,
          label: e.label || '+',
        })),
      }

      const response = await API.post(`/chatbots/${botId}/save_graph/`, payload)
      alert('Saved successfully!')
    } catch (error) {
      console.error('Save error:', error)
      alert('Error saving: ' + (error.response?.data?.message || error.message))
    } finally {
      setLoading(false)
    }
  }

  // Load graph
  const loadGraph = async () => {
    setLoading(true)
    try {
      const { data } = await API.get(`/chatbots/${botId}/`)
      
      const nds = data.nodes.map((n) => ({
        id: String(n.id),
        position: { x: n.x, y: n.y },
        data: {
          label: n.label || `${n.node_type} ${n.id}`,
          content: n.content || '',
        },
        type: 'default',
        _ntype: n.node_type,
      }))

      const eds = data.connections.map((c, i) => ({
        id: `edge-${i}`,
        source: String(c.from_node),
        target: String(c.to_node),
        label: c.condition_value || '+',
      }))

      setNodes(nds)
      setEdges(eds)
      const maxId = nds.reduce((m, n) => Math.max(m, Number(n.id)), 1000)
      idCounter = isFinite(maxId) ? maxId : 1000
      
      // Reset inspector state
      setSelected(null)
      setInspectorChanges({})
      setShowSaveCancel(false)

      alert('Loaded successfully!')
    } catch (error) {
      console.error('Load error:', error)
      alert('Error loading: ' + (error.response?.data?.message || error.message))
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadGraph()
  }, [botId])

  return (
    <div style={{ 
      display: 'flex', 
      height: '100%', 
      fontFamily: 'Arial, sans-serif',
      backgroundColor: '#f8f9fa'
    }}>
      {/* Left Panel - Nodes Sidebar */}
      <div style={{ 
        width: isLeftPanelCollapsed ? '40px' : '280px',
        backgroundColor: '#f8f9fa',
        borderRight: '1px solid #e0e0e0',
        transition: 'width 0.3s ease',
        display: 'flex',
        flexDirection: 'column'
      }}>
        <div style={{ 
          padding: '10px', 
          borderBottom: '1px solid #e0e0e0',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          {!isLeftPanelCollapsed && <h4 style={{ margin: 0 }}>Node Palette</h4>}
          <button 
            onClick={() => setIsLeftPanelCollapsed(!isLeftPanelCollapsed)}
            style={{
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              fontSize: '16px',
              padding: '5px'
            }}
            title={isLeftPanelCollapsed ? 'Expand panel' : 'Collapse panel'}
          >
            {isLeftPanelCollapsed ? '→' : '←'}
          </button>
        </div>
        
        {!isLeftPanelCollapsed && (
          <div style={{ padding: '10px', flex: 1, overflowY: 'auto' }}>
            <NodeSidebar addNode={addNode} />
          </div>
        )}
      </div>
      
      {/* Main Workspace */}
      <div style={{ 
        flex: 1, 
        position: 'relative',
        transition: 'margin 0.3s ease',
        marginLeft: isLeftPanelCollapsed ? '0' : '0',
        marginRight: isRightPanelCollapsed ? '0' : '0'
      }}>
        <div style={{ 
          position: 'absolute', 
          top: 10, 
          right: 10, 
          zIndex: 5,
          display: 'flex',
          gap: '8px'
        }}>
          <button 
            onClick={saveGraph} 
            disabled={loading}
            style={{
              padding: '8px 16px',
              backgroundColor: '#4CAF50',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: loading ? 'not-allowed' : 'pointer',
              fontSize: '14px',
              opacity: loading ? 0.7 : 1
            }}
          >
            {loading ? 'Saving...' : 'Save Graph'}
          </button>
          <button 
            onClick={loadGraph} 
            disabled={loading}
            style={{
              padding: '8px 16px',
              backgroundColor: '#2196F3',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: loading ? 'not-allowed' : 'pointer',
              fontSize: '14px',
              opacity: loading ? 0.7 : 1
            }}
          >
            {loading ? 'Loading...' : 'Reload Graph'}
          </button>
        </div>
        
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onNodeClick={onNodeClick}
          onNodeDoubleClick={onNodeDoubleClick}
          onEdgeDoubleClick={onEdgeDoubleClick}
          fitView
        >
          <MiniMap 
            nodeColor={(node) => {
              switch (node._ntype) {
                case 'greeting': return '#6ede87';
                case 'message': return '#6865A5';
                case 'user_input': return '#ff0072';
                case 'branch': return '#ff8a00';
                case 'end': return '#ff0055';
                default: return '#ccc';
              }
            }}
            style={{
              right: isRightPanelCollapsed ? 10 : 320,
              bottom: 10,
              transition: 'right 0.3s ease'
            }}
          />
          <Background />
          <Controls 
            style={{
              right: isRightPanelCollapsed ? 10 : 320,
              bottom: 150,
              transition: 'right 0.3s ease'
            }}
          />
        </ReactFlow>
      </div>
      
      {/* Right Panel - Inspector */}
      <div style={{ 
        width: isRightPanelCollapsed ? '40px' : '320px',
        backgroundColor: 'white',
        borderLeft: '1px solid #e0e0e0',
        transition: 'width 0.3s ease',
        display: 'flex',
        flexDirection: 'column'
      }}>
        <div style={{ 
          padding: '10px', 
          borderBottom: '1px solid #e0e0e0',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          {!isRightPanelCollapsed && <h4 style={{ margin: 0 }}>Node Inspector</h4>}
          <button 
            onClick={() => setIsRightPanelCollapsed(!isRightPanelCollapsed)}
            style={{
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              fontSize: '16px',
              padding: '5px'
            }}
            title={isRightPanelCollapsed ? 'Expand panel' : 'Collapse panel'}
          >
            {isRightPanelCollapsed ? '←' : '→'}
          </button>
        </div>
        
        {!isRightPanelCollapsed && (
          <div style={{ padding: '20px', flex: 1, display: 'flex', flexDirection: 'column' }}>
            {selected ? (
              <>
                <div style={{ marginBottom: '15px' }}>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px', 
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Label
                  </label>
                  <input
                    value={inspectorChanges.label !== undefined ? inspectorChanges.label : selected.data.label || ''}
                    onChange={(e) => handleInspectorChange('label', e.target.value)}
                    style={{ 
                      width: '100%',
                      padding: '8px 12px',
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      fontSize: '14px',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>
                
                <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px', 
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Content
                  </label>
                  <div style={{ flex: 1, minHeight: '200px' }}>
                    <ReactQuill
                      theme="snow"
                      value={inspectorChanges.content !== undefined ? inspectorChanges.content : selected.data.content || ''}
                      onChange={(value) => handleInspectorChange('content', value)}
                      modules={{
                        toolbar: [
                          ['bold', 'underline', 'italic'],
                          ['link'],
                          [{ list: 'ordered' }, { list: 'bullet' }],
                          ['clean'],
                        ],
                      }}
                      formats={[
                        'font',
                        'size',
                        'bold',
                        'italic',
                        'underline',
                        'link',
                        'list',
                        'bullet',
                      ]}
                      style={{ height: '100%' }}
                    />
                  </div>
                </div>
                
                <p style={{ 
                  fontSize: '12px', 
                  color: '#666', 
                  marginTop: '15px',
                  fontStyle: 'italic'
                }}>
                  Content is shown for Greeting/Message, used as prompt for User
                  Input, and End message.
                </p>
                
                {showSaveCancel && (
                  <div style={{ 
                    display: 'flex', 
                    gap: '10px', 
                    marginTop: '20px',
                    paddingTop: '15px',
                    borderTop: '1px solid #eee'
                  }}>
                    <button 
                      onClick={saveInspectorChanges}
                      style={{
                        flex: 1,
                        padding: '10px',
                        backgroundColor: '#4CAF50',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: '500'
                      }}
                    >
                      Save Changes
                    </button>
                    <button 
                      onClick={cancelInspectorChanges}
                      style={{
                        flex: 1,
                        padding: '10px',
                        backgroundColor: '#f44336',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: '500'
                      }}
                    >
                      Cancel
                    </button>
                  </div>
                )}
              </>
            ) : (
              <div style={{ 
                display: 'flex', 
                justifyContent: 'center', 
                alignItems: 'center', 
                height: '100%',
                color: '#666'
              }}>
                <p>Select a node to edit its properties.</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}